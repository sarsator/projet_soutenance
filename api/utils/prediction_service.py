import logging
from typing import Dict, Any, Optional
from pathlib import Path

from api.models.catboost_model import CatBoostModel
from api.models.vision_model import VisionModel
from api.models.model_version_manager import ModelVersionManager

logger = logging.getLogger(__name__)

class PredictionService:
    
    
    def __init__(self, catboost_model_path: str = None, vision_model_path: str = None):
        """
        Initialise le service de pr√©diction
        
        Args:
            catboost_model_path: Chemin vers le mod√®le CatBoost
            vision_model_path: Chemin vers le mod√®le de vision
        """
        self.catboost_model = CatBoostModel(catboost_model_path)
        self.vision_model = VisionModel(vision_model_path)
        self._models_loaded = False
        
        # Initialiser le gestionnaire de versions pour r√©cup√©rer les infos
        try:
            models_dir = Path(__file__).parent.parent / "models"
            self.version_manager = ModelVersionManager(models_dir)
        except Exception as e:
            logger.warning(f"Impossible d'initialiser le gestionnaire de versions: {e}")
            self.version_manager = None
    
    def get_model_versions(self) -> Dict[str, str]:
        """
        R√©cup√®re les versions des mod√®les actuellement charg√©s
        
        Returns:
            Dict avec les versions des mod√®les ML et DL
        """
        versions = {
            "catboost": "v1.0",  # Version par d√©faut
            "vision": "v1.0"     # Version par d√©faut
        }
        
        try:
            # PRIORITE 1: Lire directement depuis les m√©tadonn√©es du VisionModel charg√©
            if self.vision_model and hasattr(self.vision_model, 'metadata') and self.vision_model.metadata:
                metadata_version = self.vision_model.metadata.get('version', None)
                if metadata_version:
                    versions["vision"] = f"v{metadata_version}"
                    logger.info(f"üéØ Version Vision depuis m√©tadonn√©es charg√©es: v{metadata_version}")
            
            # PRIORITE 2: V√©rifier directement le symlink current pour la version la plus r√©cente
            if versions["vision"] == "v1.0":
                try:
                    from pathlib import Path
                    import re
                    current_dir = Path(__file__).parent.parent / "models" / "dl_model" / "versions"
                    current_symlink = current_dir / "current"
                    
                    logger.info(f"üîç V√©rification symlink: {current_symlink}")
                    
                    if current_symlink.exists() and current_symlink.is_symlink():
                        target_path = current_symlink.resolve()
                        logger.info(f"üîó Symlink pointe vers: {target_path.name}")
                        
                        version_match = re.search(r'v(\d+\.\d+)_', target_path.name)
                        if version_match:
                            versions["vision"] = f"v{version_match.group(1)}"
                            logger.info(f"‚úÖ Version Vision depuis symlink current: v{version_match.group(1)}")
                        
                        # V√©rifier aussi les m√©tadonn√©es du dossier target
                        metadata_file = target_path / "metadata.json"
                        if metadata_file.exists():
                            import json
                            with open(metadata_file, 'r') as f:
                                metadata = json.load(f)
                            meta_version = metadata.get('version', None)
                            if meta_version:
                                versions["vision"] = f"v{meta_version}"
                                logger.info(f"üìã Version Vision depuis metadata.json: v{meta_version}")
                                
                except Exception as e:
                    logger.warning(f"Erreur lecture symlink current: {e}")
            
            # PRIORITE 3: Utiliser le gestionnaire de versions comme fallback
            if versions["vision"] == "v1.0" and self.version_manager:
                try:
                    vision_version = self.version_manager.obtenir_version_actuelle("dl_model")
                    if vision_version:
                        versions["vision"] = f"v{vision_version}"
                        logger.info(f"üìÅ Version Vision via version manager: v{vision_version}")
                except Exception as e:
                    logger.warning(f"Erreur r√©cup√©ration version Vision via manager: {e}")
            
            # PRIORITE 4: Extraire depuis le chemin du mod√®le vision comme dernier fallback
            if versions["vision"] == "v1.0" and self.vision_model and self.vision_model.est_charge():
                try:
                    if hasattr(self.vision_model, 'model_path'):
                        model_path = str(self.vision_model.model_path)
                        logger.info(f"üìÇ Chemin du mod√®le Vision: {model_path}")
                        
                        # Extraire la version depuis le chemin (ex: v1.6_20250719_200557)
                        import re
                        version_match = re.search(r'v(\d+\.\d+)_', model_path)
                        if version_match:
                            versions["vision"] = f"v{version_match.group(1)}"
                            logger.info(f"üîç Version vision extraite du chemin: v{version_match.group(1)}")
                except Exception as e:
                    logger.warning(f"Erreur extraction version depuis chemin: {e}")
            
            # R√©cup√©rer la version CatBoost
            if self.version_manager:
                try:
                    catboost_version = self.version_manager.obtenir_version_actuelle("ml_model")
                    if catboost_version:
                        versions["catboost"] = f"v{catboost_version}"
                except Exception as e:
                    logger.warning(f"Erreur r√©cup√©ration version CatBoost: {e}")
                    
        except Exception as e:
            logger.warning(f"Erreur lors de la r√©cup√©ration des versions: {e}")
        
        logger.info(f"üè∑Ô∏è  Versions finales des mod√®les: {versions}")
        return versions
    
    def charger_modeles(self) -> bool:
        """
        Charge les deux mod√®les
        
        Returns:
            bool: True si tous les mod√®les sont charg√©s avec succ√®s
        """
        try:
            logger.info("Chargement des mod√®les...")
            
            catboost_success = self.catboost_model.charger_modele()
            vision_success = self.vision_model.charger_modele()
            
            self._models_loaded = catboost_success and vision_success
            
            if self._models_loaded:
                logger.info("Tous les mod√®les sont charg√©s avec succ√®s")
            else:
                logger.warning("√âchec du chargement de certains mod√®les")
                
            return self._models_loaded
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement des mod√®les: {e}")
            return False
    
    def predict(self, 
                race_champignon: str,
                type_substrat: str,
                jours_inoculation: int,
                hygrometrie: float,
                co2_ppm: float,
                image_path: str = None) -> Dict[str, Any]:
        """
        Effectue une pr√©diction orchestr√©e
        
        Args:
            race_champignon: Race du champignon
            type_substrat: Type de substrat
            jours_inoculation: Nombre de jours depuis l'inoculation
            hygrometrie: Taux d'hygrom√©trie
            co2_ppm: Taux de CO2 en PPM
            image_path: Chemin vers l'image (optionnel)
            
        Returns:
            Dict contenant les r√©sultats de pr√©diction
        """
        logger.info("=== D√âBUT DE PR√âDICTION SERVICE ===")
        logger.info(f"Param√®tres: race_champignon={race_champignon}, type_substrat={type_substrat}")
        logger.info(f"Valeurs num√©riques: jours_inoculation={jours_inoculation}, hygrometrie={hygrometrie}, co2_ppm={co2_ppm}")
        logger.info(f"Image fournie: {image_path is not None}")
        
        if not self._models_loaded:
            logger.info("Mod√®les non charg√©s, tentative de chargement...")
            if not self.charger_modeles():
                logger.error("‚ùå Impossible de charger les mod√®les")
                raise RuntimeError("Impossible de charger les mod√®les")
            logger.info("‚úÖ Mod√®les charg√©s avec succ√®s")
        
        try:
            # √âtape 1: Pr√©diction CatBoost
            logger.info("=== √âTAPE 1: Pr√©diction CatBoost ===")
            
            # Pr√©paration des donn√©es pour CatBoost
            input_data = {
                "race_champignon": race_champignon,
                "type_substrat": type_substrat,
                "jours_inoculation": jours_inoculation,
                "hygrometrie": hygrometrie,
                "co2_ppm": co2_ppm
            }
            logger.info(f"Donn√©es pr√©par√©es pour CatBoost: {input_data}")
            
            catboost_result = self.catboost_model.predict(input_data)
            logger.info(f"‚úÖ R√©sultat CatBoost: {catboost_result}")
            
            # Structure de r√©ponse de base
            response = {
                "catboost_prediction": catboost_result,
                "vision_prediction": None,
                "final_decision": None,
                "confidence_score": catboost_result["confidence"],  # CORRIG√â: Utiliser confidence (float) au lieu de probability (list)
                "confidence_source": "catboost",  # Nouvelle information sur la source de confiance
                "models_used": ["catboost"],
                "analysis_steps": ["catboost_analysis"],
                "multi_sac_count": None  # Nouvelle information sur le nombre de sacs
            }
            
            # √âtape 2: D√©cision d'utiliser la vision
            catboost_prediction = catboost_result["prediction"]
            catboost_probability = catboost_result["probability"]
            catboost_confidence = catboost_result["confidence"]  # Utiliser la confiance pour les logs
            use_vision = False
            
            if catboost_result["risk_level"] == "high":  # Risque √©lev√© (probabilit√© > 0.49)
                use_vision = True
                logger.info(f"CatBoost d√©tecte un risque √©lev√© (confiance={catboost_confidence:.3f}), passage au mod√®le de vision")
            else:
                logger.info(f"CatBoost d√©tecte un risque faible (confiance={catboost_confidence:.3f}), pas de passage au mod√®le de vision")
            
            # √âtape 3: Pr√©diction Vision si n√©cessaire
            if use_vision and image_path:
                if not Path(image_path).exists():
                    logger.warning(f"Image non trouv√©e: {image_path}")
                    response["final_decision"] = catboost_prediction
                    response["warning"] = "Image non trouv√©e, utilisation du r√©sultat CatBoost uniquement"
                else:
                    try:
                        logger.info("√âtape 2: Pr√©diction Vision")
                        vision_result = self.vision_model.predict(image_path)
                        response["vision_prediction"] = vision_result
                        response["models_used"].append("vision")
                        response["analysis_steps"].append("vision_analysis")
                        
                        # Ajouter les informations de Vision
                        response["multi_sac_count"] = vision_result.get("multi_sac_value", None)
                        response["confidence_source"] = "vision"  # La confiance vient maintenant de Vision
                        
                        # Combinaison des r√©sultats
                        response["final_decision"] = self._combine_predictions(
                            catboost_result, vision_result
                        )
                        response["confidence_score"] = vision_result.get("confidence", 0.5)  # Utiliser directement la confiance de Vision
                        
                    except Exception as e:
                        logger.error(f"Erreur lors de la pr√©diction vision: {e}")
                        response["final_decision"] = catboost_prediction
                        response["error"] = f"Erreur vision: {str(e)}"
            else:
                # Utilisation du r√©sultat CatBoost uniquement
                response["final_decision"] = catboost_prediction
                if not image_path:
                    response["note"] = "Aucune image fournie, utilisation du mod√®le CatBoost uniquement"
            
            # Ajouter les versions des mod√®les
            response["model_versions"] = self.get_model_versions()
            
            logger.info(f"‚úÖ Pr√©diction finale: {response['final_decision']}")
            logger.info("=== FIN DE PR√âDICTION SERVICE ===")
            return response
            
        except Exception as e:
            import traceback
            error_details = traceback.format_exc()
            logger.error(f"‚ùå ERREUR CRITIQUE dans prediction_service:")
            logger.error(f"Type d'erreur: {type(e).__name__}")
            logger.error(f"Message: {str(e)}")
            logger.error(f"Traceback complet:\n{error_details}")
            logger.error("=== FIN DE PR√âDICTION SERVICE (ERREUR) ===")
            raise
    
    def _combine_predictions(self, catboost_result: Dict, vision_result: Dict) -> str:
        """
        Combine les pr√©dictions des deux mod√®les
        PRIORIT√â AU MOD√àLE VISION car il analyse l'image r√©elle
        
        Args:
            catboost_result: R√©sultat CatBoost
            vision_result: R√©sultat Vision
            
        Returns:
            str: Pr√©diction finale
        """
        catboost_pred = catboost_result["prediction"]
        catboost_risk = catboost_result["risk_level"]
        vision_pred = vision_result["prediction"]
        vision_confidence = vision_result.get("confidence", 0.5)
        
        logger.info(f"Combinaison des pr√©dictions:")
        logger.info(f"  - CatBoost: {catboost_pred} (risque: {catboost_risk})")
        logger.info(f"  - Vision: {vision_pred} (confiance: {vision_confidence:.3f})")
        
        # NOUVEAU: Gestion du cas "incertain" de Vision
        if vision_pred == "incertain":
            logger.info("Vision incertain -> utilisation de CatBoost avec prudence")
            # Si CatBoost est tr√®s confiant, on peut s'y fier
            catboost_prob = max(catboost_result["probability"])
            if catboost_risk == "high" and catboost_prob > 0.9:
                return "contamine"
            else:
                return "sain"  # En cas de doute, privil√©gier "sain"
        
        # NOUVEAU: Gestion des scores mod√©r√©s de Vision (0.3-0.6)
        if 0.3 <= vision_confidence <= 0.6:
            logger.info(f"Vision avec confiance mod√©r√©e ({vision_confidence:.3f})")
            # Dans ce cas, on fait plus confiance √† la coh√©rence entre les deux mod√®les
            if catboost_risk == "high" and vision_pred == "contamine":
                logger.info("Accord CatBoost (risque √©lev√©) + Vision (contamin√©) -> contamin√©")
                return "contamine"
            elif catboost_risk == "low" and vision_pred == "sain":
                logger.info("Accord CatBoost (risque faible) + Vision (sain) -> sain")
                return "sain"
            else:
                # D√©saccord avec confiance mod√©r√©e -> √™tre conservateur
                logger.info("D√©saccord avec confiance mod√©r√©e -> sain par pr√©caution")
                return "sain"
        
        # Si Vision est confiant (>60%), on suit sa d√©cision
        elif vision_confidence > 0.60:
            logger.info(f"Vision confiant ({vision_confidence:.3f}), d√©cision: {vision_pred}")
            return vision_pred
        
        # Si Vision est moyennement confiant (>40%), on consid√®re les deux mod√®les
        elif vision_confidence > 0.40:
            if catboost_risk == "high" and vision_pred == "contamine":
                # Les deux mod√®les s'accordent sur la contamination
                logger.info("Accord entre CatBoost (risque √©lev√©) et Vision (contamin√©)")
                return "contamine"
            elif catboost_risk == "low" and vision_pred == "sain":
                # Les deux mod√®les s'accordent sur la propret√©
                logger.info("Accord entre CatBoost (risque faible) et Vision (sain)")
                return "sain"
            else:
                # D√©saccord : on privil√©gie Vision car il voit l'image r√©elle
                logger.info(f"D√©saccord - CatBoost: {catboost_risk}, Vision: {vision_pred}. Priorit√© √† Vision.")
                return vision_pred
        
        # Si Vision n'est pas confiant (<40%), on utilise CatBoost en backup AVEC PRUDENCE
        else:
            logger.warning(f"Vision peu confiant ({vision_confidence:.3f})")
            
            # NOUVEAU: Si Vision dit clairement "sain", m√™me avec faible confiance, on le respecte
            if vision_pred == "sain":
                logger.info("Vision dit 'sain' m√™me avec faible confiance -> respecter cette d√©cision")
                return "sain"
            
            # NOUVEAU: Si CatBoost dit "risque √©lev√©" mais Vision n'est pas s√ªr, 
            # on reste prudent et on dit "sain" sauf si vraiment critique
            if catboost_risk == "high":
                # V√©rifier la probabilit√© exacte de CatBoost
                catboost_prob = max(catboost_result["probability"])
                if catboost_prob > 0.95:  # CatBoost TR√àS s√ªr (95%+)
                    logger.info("CatBoost extr√™mement confiant sur risque √©lev√©, d√©cision: contamin√©")
                    return "contamine"
                else:
                    logger.info("CatBoost moyennement confiant, Vision incertain -> sain par pr√©caution")
                    return "sain"
            else:
                logger.info("CatBoost indique risque faible, d√©cision: sain")
                return "sain"
    
    def _calculate_combined_confidence(self, catboost_result: Dict, vision_result: Dict) -> float:
        """
        Calcule la confiance combin√©e en privil√©giant Vision
        
        Args:
            catboost_result: R√©sultat CatBoost
            vision_result: R√©sultat Vision
            
        Returns:
            float: Score de confiance combin√©
        """
        catboost_prob = catboost_result["probability"]
        catboost_risk = catboost_result["risk_level"]
        vision_conf = vision_result["confidence"]
        vision_pred = vision_result["prediction"]
        
        # Calcul bas√© sur la nouvelle logique de priorit√© √† Vision
        
        # Si Vision est tr√®s confiant, la confiance finale est principalement bas√©e sur Vision
        if vision_conf > 0.90:
            return vision_conf * 0.9 + catboost_prob * 0.1
        
        # Si Vision est confiant, on donne plus de poids √† Vision
        elif vision_conf > 0.70:
            return vision_conf * 0.75 + catboost_prob * 0.25
        
        # Si Vision est moyennement confiant
        elif vision_conf > 0.50:
            # Si les deux mod√®les s'accordent, confiance √©lev√©e
            if (catboost_risk == "high" and vision_pred == "contamine") or \
               (catboost_risk == "low" and vision_pred == "sain"):
                # Accord -> confiance combin√©e √©lev√©e
                return (vision_conf + catboost_prob) * 0.6
            else:
                # D√©saccord -> on suit Vision mais avec confiance r√©duite
                return vision_conf * 0.8
        
        # Si Vision n'est pas confiant, on utilise principalement CatBoost
        else:
            return catboost_prob * 0.7 + vision_conf * 0.3
    
    def health_check(self) -> Dict[str, Any]:
        """
        V√©rifie l'√©tat des mod√®les
        
        Returns:
            Dict avec l'√©tat de chaque mod√®le
        """
        return {
            "catboost_loaded": self.catboost_model.est_charge(),
            "vision_loaded": self.vision_model.est_charge(),
            "all_models_ready": self._models_loaded
        }
    
    def recharger_modeles(self) -> bool:
        """
        Recharge forc√©ment tous les mod√®les (utile apr√®s une mise √† jour)
        
        Returns:
            bool: True si le rechargement a r√©ussi
        """
        try:
            logger.info("üîÑ Rechargement forc√© des mod√®les...")
            
            # D√©charger les mod√®les actuels
            self._models_loaded = False
            
            # FORCER LA REINSTANCE COMPLETE DU VISION MODEL
            logger.info("üîÑ R√©instanciation compl√®te du VisionModel...")
            
            # D√©truire compl√®tement l'ancienne instance
            self.vision_model = None
            
            # Cr√©er une nouvelle instance qui va red√©tecter le chemin automatiquement
            from ..models.vision_model import VisionModel
            self.vision_model = VisionModel()  # Sans chemin pour forcer l'auto-d√©tection
            
            # Forcer le rechargement du mod√®le CatBoost aussi
            self.catboost_model._model = None
            self.catboost_model._model_loaded = False
            
            # Recharger les mod√®les
            result = self.charger_modeles()
            
            if result:
                logger.info("‚úÖ Rechargement des mod√®les r√©ussi")
                
                # Log des nouvelles versions d√©tect√©es
                versions = self.get_model_versions()
                logger.info(f"üìã Nouvelles versions d√©tect√©es: {versions}")
                
                # V√©rifier sp√©cifiquement la version du mod√®le Vision
                if hasattr(self.vision_model, 'metadata') and self.vision_model.metadata:
                    vision_meta_version = self.vision_model.metadata.get('version', 'unknown')
                    logger.info(f"üéØ Version Vision depuis m√©tadonn√©es: {vision_meta_version}")
                
                if hasattr(self.vision_model, 'model_path'):
                    logger.info(f"üìÅ Chemin Vision Model: {self.vision_model.model_path}")
                
                return True
            else:
                logger.error("‚ùå √âchec du rechargement des mod√®les")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur critique lors du rechargement: {e}")
            self._models_loaded = False
            return False

    def check_models_version_sync(self) -> bool:
        """
        V√©rifie si les mod√®les charg√©s correspondent aux versions actuelles
        
        Returns:
            bool: True si synchronis√©, False sinon
        """
        try:
            if not self.version_manager:
                return True  # Pas de v√©rification possible
            
            # R√©cup√©rer les versions actuelles du syst√®me
            current_dl_version = self.version_manager.obtenir_version_actuelle("dl_model")
            current_ml_version = self.version_manager.obtenir_version_actuelle("ml_model")
            
            # R√©cup√©rer les versions des mod√®les charg√©s
            loaded_versions = self.get_model_versions()
            
            # Comparer
            dl_sync = loaded_versions["vision"] == f"v{current_dl_version}"
            ml_sync = loaded_versions["catboost"] == f"v{current_ml_version}"
            
            if not (dl_sync and ml_sync):
                logger.warning(f"‚ö†Ô∏è  D√©synchronisation d√©tect√©e:")
                logger.warning(f"   Vision: charg√© {loaded_versions['vision']}, actuel v{current_dl_version}")
                logger.warning(f"   CatBoost: charg√© {loaded_versions['catboost']}, actuel v{current_ml_version}")
                return False
            
            return True
            
        except Exception as e:
            logger.warning(f"Erreur lors de la v√©rification de synchronisation: {e}")
            return True  # En cas d'erreur, on assume que c'est OK